# ============================================================================
# Google Cloud Build Configuration for Flask CRM - Cloud Run Deployment
# ============================================================================
# This configuration automates:
# - Building Docker image
# - Pushing to Artifact Registry
# - Running database migrations via Cloud Run Jobs
# - Deploying to Cloud Run
# - Creating admin user
# ============================================================================

steps:
  # ==========================================================================
  # STEP 1: Build Docker Image
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-docker-image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:latest'
      - '--build-arg'
      - 'BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
      - '--build-arg'
      - 'VCS_REF=${SHORT_SHA}'
      - '--cache-from'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:latest'
      - '.'
    timeout: 600s

  # ==========================================================================
  # STEP 2: Push Image with Commit SHA Tag to Artifact Registry
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image-sha'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA}'
    waitFor: ['build-docker-image']

  # ==========================================================================
  # STEP 3: Push Latest Tag to Artifact Registry
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image-latest'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:latest'
    waitFor: ['build-docker-image']

  # ==========================================================================
  # STEP 4: Create/Update Cloud Run Job for Database Migrations
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'create-migration-job'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run jobs describe flask-crm-migrate \
          --region=${_REGION} 2>/dev/null || \
        gcloud run jobs create flask-crm-migrate \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --set-cloudsql-instances=${PROJECT_ID}:${_REGION}:${_CLOUDSQL_INSTANCE} \
          --set-secrets=SECRET_KEY=${_SECRET_NAME}:latest,DATABASE_URL=${_DB_SECRET_NAME}:latest \
          --max-retries=3 \
          --task-timeout=600s \
          --command=python \
          --args="migrate_db.py"

        # Update job with new image if it exists
        gcloud run jobs update flask-crm-migrate \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT}
    waitFor: ['push-image-sha']

  # ==========================================================================
  # STEP 5: Execute Database Migration Job
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'run-migrations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running database migrations..."
        gcloud run jobs execute flask-crm-migrate \
          --region=${_REGION} \
          --wait

        echo "Checking migration job status..."
        gcloud run jobs executions describe \
          $(gcloud run jobs executions list \
            --job=flask-crm-migrate \
            --region=${_REGION} \
            --limit=1 \
            --format='value(name)') \
          --region=${_REGION}
    waitFor: ['create-migration-job']

  # ==========================================================================
  # STEP 6: Deploy to Cloud Run Service
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'deploy-cloud-run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--service-account=${_SERVICE_ACCOUNT}'
      - '--set-cloudsql-instances=${PROJECT_ID}:${_REGION}:${_CLOUDSQL_INSTANCE}'
      - '--set-secrets=SECRET_KEY=${_SECRET_NAME}:latest,DATABASE_URL=${_DB_SECRET_NAME}:latest'
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--min-instances=${_MIN_INSTANCES}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--port=8080'
      - '--timeout=300s'
      - '--concurrency=80'
      - '--cpu-throttling'
      - '--session-affinity'
      - '--execution-environment=gen2'
      - '--add-volume=name=uploads,type=cloud-storage,bucket=${_UPLOAD_BUCKET}'
      - '--add-volume-mount=volume=uploads,mount-path=/app/uploads'
      - '--tag=v${SHORT_SHA}'
    waitFor: ['run-migrations']

  # ==========================================================================
  # STEP 7: Create/Update Cloud Run Job for Admin User Creation
  # ==========================================================================
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'create-admin-job'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run jobs describe flask-crm-create-admin \
          --region=${_REGION} 2>/dev/null || \
        gcloud run jobs create flask-crm-create-admin \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --set-cloudsql-instances=${PROJECT_ID}:${_REGION}:${_CLOUDSQL_INSTANCE} \
          --set-secrets=SECRET_KEY=${_SECRET_NAME}:latest,DATABASE_URL=${_DB_SECRET_NAME}:latest,ADMIN_PASSWORD=${_ADMIN_PASSWORD_SECRET}:latest \
          --max-retries=1 \
          --task-timeout=300s \
          --command=python \
          --args="create_admin.py"

        # Update job with new image
        gcloud run jobs update flask-crm-create-admin \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT}
    waitFor: ['deploy-cloud-run']

  # ==========================================================================
  # STEP 8: Test Deployment Health
  # ==========================================================================
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get service URL
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')

        echo "Testing deployment at: $$SERVICE_URL"

        # Wait for service to be ready
        sleep 10

        # Health check
        HTTP_CODE=$$(curl -s -o /dev/null -w "%{http_code}" "$$SERVICE_URL/")

        if [ "$$HTTP_CODE" == "200" ] || [ "$$HTTP_CODE" == "302" ]; then
          echo "✓ Health check passed (HTTP $$HTTP_CODE)"
          exit 0
        else
          echo "✗ Health check failed (HTTP $$HTTP_CODE)"
          exit 1
        fi
    waitFor: ['deploy-cloud-run']

# ==============================================================================
# SUBSTITUTION VARIABLES
# ==============================================================================
# These can be set in Cloud Build trigger or provided via CLI with --substitutions
# ==============================================================================
substitutions:
  # Project Configuration
  _REGION: 'asia-south2'
  _REPOSITORY: 'flask-crm-repo'
  _SERVICE_NAME: 'flask-crm-service'
  _SERVICE_ACCOUNT: 'flask-crm-sa@mis-gempundit.iam.gserviceaccount.com'

  # Cloud SQL Configuration
  _CLOUDSQL_INSTANCE: 'flask-crm-db'

  # Secret Manager References
  _SECRET_NAME: 'flask-crm-secret-key'
  _DB_SECRET_NAME: 'flask-crm-database-url'
  _ADMIN_PASSWORD_SECRET: 'flask-crm-admin-password'

  # Cloud Storage
  _UPLOAD_BUCKET: 'mis-gempundit-flask-crm-uploads'

  # Resource Limits
  _MEMORY: '2Gi'
  _CPU: '2'
  _MIN_INSTANCES: '1'
  _MAX_INSTANCES: '10'

# ==============================================================================
# IMAGES TO STORE
# ==============================================================================
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/flask-crm:latest'

# ==============================================================================
# BUILD OPTIONS
# ==============================================================================
options:
  # Use high-performance machine for faster builds
  machineType: 'E2_HIGHCPU_8'

  # Use Cloud Logging
  logging: CLOUD_LOGGING_ONLY

  # Use larger disk for Docker layer caching
  diskSizeGb: 100

  # Enable Docker layer caching
  substitutionOption: 'ALLOW_LOOSE'

  # Dynamic substitutions
  dynamic_substitutions: false

# ==============================================================================
# TIMEOUT
# ==============================================================================
timeout: '1800s'  # 30 minutes

# ==============================================================================
# SERVICE ACCOUNT (Optional - for accessing secrets during build)
# ==============================================================================
# serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build-sa@${PROJECT_ID}.iam.gserviceaccount.com'

# ==============================================================================
# TAGS (For organizing builds)
# ==============================================================================
tags:
  - 'flask-crm'
  - 'cloud-run'
  - 'production'
